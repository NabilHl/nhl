<!-- Add this inside the quick-view modal -->
<div class="customization-panel">
  <h3>Customize Your Product</h3>
  
  {% for option in product.options_with_values %}
    <div class="option-selector">
      <label>{{ option.name }}</label>
      <div class="option-values">
        {% for value in option.values %}
          <div class="option-value" 
               data-option="{{ option.name | handleize }}"
               data-value="{{ value | handleize }}">
            {% if option.name == 'Color' %}
              <span class="color-swatch" style="background-color: {{ value | handleize }};"></span>
            {% else %}
              {{ value }}
            {% endif %}
          </div>
        {% endfor %}
      </div>
    </div>
  {% endfor %}
  
  <div class="personalization">
    <label>Add Personalization</label>
    <input type="text" placeholder="Enter custom text (max 15 chars)" maxlength="15" class="custom-text">
    <div class="preview-text">Preview: <span></span></div>
  </div>
</div>

<style>
.customization-panel {
  margin: 25px 0;
  padding: 20px;
  background: rgba(255,255,255,0.05);
  border-radius: 8px;
}

.option-selector {
  margin-bottom: 15px;
}

.option-selector label {
  display: block;
  margin-bottom: 8px;
  text-transform: uppercase;
  font-size: 12px;
  letter-spacing: 1px;
}

.option-values {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
}

.option-value {
  padding: 8px 12px;
  border: 1px solid rgba(255,255,255,0.3);
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.3s;
  font-size: 14px;
}

.option-value:hover {
  border-color: #f39041;
}

.option-value.selected {
  background: #f39041;
  border-color: #f39041;
}

.color-swatch {
  display: inline-block;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  vertical-align: middle;
  margin-right: 5px;
}

.personalization {
  margin-top: 20px;
}

.personalization input {
  width: 100%;
  padding: 10px;
  background: rgba(255,255,255,0.1);
  border: 1px solid rgba(255,255,255,0.3);
  color: white;
  border-radius: 4px;
  margin-top: 8px;
}

.preview-text {
  margin-top: 10px;
  font-size: 14px;
  opacity: 0.8;
}

.preview-text span {
  font-style: italic;
  color: #f39041;
}
</style>

<script>
// Add to your existing script
document.addEventListener('DOMContentLoaded', function() {
  // Product customization
  const optionValues = document.querySelectorAll('.option-value');
  
  optionValues.forEach(option => {
    option.addEventListener('click', function() {
      const optionName = this.getAttribute('data-option');
      const optionValue = this.getAttribute('data-value');
      
      // Remove selected class from siblings
      this.parentNode.querySelectorAll('.option-value').forEach(el => {
        el.classList.remove('selected');
      });
      
      // Add selected class to clicked option
      this.classList.add('selected');
      
      // Update variant selection
      updateVariantSelection();
    });
  });
  
  // Personalization text
  const customTextInput = document.querySelector('.custom-text');
  const previewText = document.querySelector('.preview-text span');
  
  if (customTextInput && previewText) {
    customTextInput.addEventListener('input', function() {
      previewText.textContent = this.value;
      
      // Update the product title in the modal
      const productTitle = document.querySelector('.modal-product-info h1');
      if (productTitle) {
        const originalTitle = productTitle.getAttribute('data-original-title') || productTitle.textContent;
        productTitle.setAttribute('data-original-title', originalTitle);
        productTitle.textContent = originalTitle + (this.value ? ` - "${this.value}"` : '');
      }
    });
  }
  
  function updateVariantSelection() {
    const selectedOptions = {};
    document.querySelectorAll('.option-selector .selected').forEach(selected => {
      const optionName = selected.getAttribute('data-option');
      const optionValue = selected.getAttribute('data-value');
      selectedOptions[optionName] = optionValue;
    });
    
    // Find matching variant
    const variants = JSON.parse(document.querySelector('[data-variants-json]').textContent);
    const customText = customTextInput ? customTextInput.value : '';
    
    const matchedVariant = variants.find(variant => {
      return variant.options.every((option, index) => {
        const optionName = option${index + 1};
        return selectedOptions[optionName] === option.toLowerCase();
      });
    });
    
    if (matchedVariant) {
      document.querySelector('.quick-add input[name="id"]').value = matchedVariant.id;
      
      // Update price if different
      const priceElement = document.querySelector('.modal-product-info .price');
      if (priceElement && matchedVariant.price !== parseFloat(priceElement.getAttribute('data-base-price'))) {
        priceElement.textContent = Shopify.formatMoney(matchedVariant.price);
      }
    }
  }
  
  // Add this to your quick view modal initialization
  const modalContent = document.querySelector('.modal-product-content');
  if (modalContent) {
    modalContent.setAttribute('data-variants-json', JSON.stringify({{ product.variants | json }}));
  }
});
</script>
